ワンべぇWM: A Tiny BASIC for Windows Mobile 5.0
                                                          Version 0.03
                                                        2007年04月04日
                                                      株式会社ピーデー
                                                              川俣　晶
         This software is distributed under GNU General Public License

●これは何か?
　ワンべぇWMは、Windows Mobile 5.0用超小型BASICインタプリタです。ホストとなるPCは必要とせず、Windows Mobile 5.0マシン単体でプログラムの開発とデバッグを行うことができます。
　ワンべぇWMは、WonderWitch上で使用できる小型BASICインタプリタ、「ワンべぇ: WONBE, WonderWitch BASIC Environment Ver 0.06」(http://www.piedey.co.jp/wonbe/)から、言語処理系学習用サンプルとして機能を削り落としたWin32用ワンべぇBaby(日経ソフトウェア誌等に掲載)を経て、Windows Mobile 5.0用として全面改定されたものです。

●実行に必要なもの
　W-ZERO3シリーズ、X01HT等、Windows Mobile 5.0が動作するマシン (VGAとQVGA解像度に対応。800x480でも動くと思いますが未検証)
　(Windows Mobile 5.0 SDKのエミュレータを使えばPC上でも動作します)

●ソースコードのビルドに必要なもの
　Visual Studio 2005 (C++)+Windows Mobile 5.0 SDK

●インストール
　wonbeWM*.cabファイルを開くことでインストールされます。

●起動と終了
　ワンべぇWMを起動するには、プログラムからwonbeWMを開きます。

●終了
　終了する際には、MENUからExitを選ぶか、あるいはコマンド入力待ちに対して、exitリターンと入力します。コマンド入力待ちになっていない場合は、BREAKをタップし、プログラムを停止させます。

●付属サンプルソースの実行
　MENUからRunを選び、以下のいずれかのファイルを選んでください。
・star 「STAR WITCH 〜ゴブリン帝国の野望〜」
　(ルールは、マイドキュメント内のwonbeWMフォルダ内のstar.txtにて説明しています)
・maze 「迷路作成」
・randomPixels 「カレイド・スコープ」
・detectqvga「VGA/QVGAの種類判定サンプルソース」
・walkgame「矢印キーで宝をゲットするゲーム。screenpeek関数の使用例」

●開発環境の概要
　行番号ベースのエディタが使えます。
　行番号に引き続いて1行を入力してリターンを押すと、プログラムに記録されます。
　行番号だけを入力してリターンを押すとその行は削除されます。
　行番号無しで命令を入力すると即座に実行されます。
　編集はスクリーンエディタを使用できます。矢印キーでカーソルを戻し、表示された行を編集してからリターンを押すと再入力されます。
　実行中は、BREAKメニューをタップするといつでも対話モードに戻れます。その後、contステートメントで実行を継続できます。
　中間言語に翻訳してから処理するため、中間言語に翻訳できない場合は、入力直後にエラーが出ます。

●表示画面について
　各種処理の簡素化と画面レイアウトを手軽に行うために、テキスト画面は全ての文字が同じサイズで扱われます。つまり半角文字も全角文字のサイズに拡大されて表示されます。縦横の表示可能な文字数は、widthステートメントで変更できます。(ポートレイトとランドスケープを切り換えるorientステートメントと併用します)
　テキスト画面の上から任意の行数は低解像度グラフィックスに切り換えることができます(graphステートメント使用)。

●ソースコードの形式について
　load/saveされるソースコードは、全てUTF-16エンコードのBOM付きテキストファイルとなります。

●言語の概要
　ごく軽いBASIC言語です。
　昔あったTiny BASICに近い構文を持っています。
　データ型は、符号付き16bit整数だけです。
　定数は、-32767〜32767の10進数か、0x0000〜0xffffの16進数で記述できます。-32768は変数には記憶できますが、ソースには書けません。(-32767-1のように書いてください)
　変数は、グローバル変数として、A〜Zのアルファベット大文字1文字のものが26個あります。
　ローカル変数として、a〜zのアルファベット小文字1文字のものが26個あります。ローカル変数はgosubステートメントを実行したときに新しい領域が割り当てられ、returnステートメントを実行したときにgosubする前の領域が戻ってきます。
　配列変数は@(インデックス)という形式の1次元配列だけが使用できます。使用可能なサイズは、プログラム記憶領域(48Kバイト)の残りサイズに等しくなります。インデックスは0から始まります。(例: for i=0 to 9:print @(i):next)
　演算子の優先順位は「単項演算子 > */ > +- > 比較演算子 > and,or,xor」となります。(比較演算子は、<と>と=で記述する演算子すべて)
　計算順序は、括弧()を使って明示的に変更できます。
　オーバーフロー、アンダーフローのチェックはありません。溢れは無視されます。ただしゼロ除算はエラーになります。
　ステートメントなどのキーワードはすべてアルファベット小文字で入力します。大文字を使っても小文字になります。

●　ステートメント一覧

変数 = 式
　式を計算して変数に代入します。letキーワードはサポートしていません。
例: a=b+c

if 式 then ステートメント列
　式が0でなければステートメント列を実行します。0なら次の行から実行を継続します。elseはありません。
例: if (a=0) and (b=1) then goto 200

print [文字列|式|chr(式)][,|;]...
　専用テキスト画面の現在のカーソル位置から文字を表示します。
　式の前後に空白文字が入ることはありません。
　chr(式)は、式の値を文字コード(Unicode)と見なして表示します。
　区切り文字の;は何もしません。,はタブストップ位置までカーソルを進めます。
　print文の最後は;または,で終わった場合は改行しません。
例: print "計算結果=",chr(34);1+2;chr(34)

locate 式,式
　専用テキスト画面の現在のカーソル位置を設定します。引数はx,yの順番です。
例: locate 10,10

cls
　専用テキスト画面を消去します。
例: cls

goto 式
　式の行番号に飛びます。計算型goto文が可能です。つまり、goto A*100とすると、Aが1のきは100行目に。2のときは200行目に飛びます。
例: goto 100

gosub 式
　スタックに現在位置とローカル変数を積んで、式の行番号に飛びます。gotoと同じく計算型gosubが可能です。
　スタックはforと合わせて8レベルまでです。
例: gosub 100

return
　gosubがスタックに積んだ情報を取り出して、そこに処理を戻します。ローカル変数も戻ります。
例: return

for 変数=式 to 式
for 変数=式 to 式 step 式
　変数の値を変化させながらnextまで繰り返します。
　最後の変数の値が終値に一致せず、終値+ステップ値がオーバーフローする場合は無限ループする可能性があります。そのような値は指定しないように注意してください。
例: for i=0 to 10 step 2

next
　forステートメントの位置に戻って動作を繰り返します。forステートメントで示した条件が満たされた場合は、nextの次に動作が進みます。nextの後に変数名を書くとエラーになります。
例: next

end
　プログラムの実行を終了します。

break
　その位置で一時的に実行を中断します。contステートメントで実行を継続できます。

rem 文字列
'文字列
　コメントを記述します。後ろに:を置いてステートメントを続けることはできません。
例: rem これはテストプログラムです。
例: 'この式が座標を計算します

new
　メモリ上のプログラムを消去します。

list [行番号][-][行番号]
　指定範囲の行番号のプログラムをリストします。すべて省略すると全行をリストします。

run
run 式
run 文字列
　プログラムを実行します。それに先だって変数やスタックがクリアされます。
　runはメモリ上のプログラムを先頭から。run 式は、式の行番号から。run 文字列は文字列のファイルを読み込んでそれを実行します。
例: run
例: run 100
例: run "test.wb"

cont
　breakステートメントやPキーによるブレークによって停止した位置から実行を再開します。

save [文字列]
　文字列をファイル名としてメモリ上のプログラムを保存します。
　文字列を省略した場合は、直前に使用したファイル名が使用されます。直前に使用したファイル名が無い場合はエラーになります。
例: save "hello.wb"

load 文字列
　文字列をファイル名としてファイルからプログラムを読み込みます。中間言語に翻訳できない行がある場合はエラーを表示して読み込みを継続します。プログラムの実行中に使用した場合は実行は中断されます。
例: load "hello.wb"

merge 文字列
　メモリ上のプログラムにファイル上のプログラムを混ぜ合わせます。同じ行番号の行は読み込まれる方が優先されます。中間言語に翻訳できない行がある場合はエラーを表示して読み込みを継続します。プログラムの実行中に使用した場合は実行は中断されます。
例: merge "merge.wb"

randomize 式
　乱数の初期値を指定します。これを使わないと必ず同じ順序で乱数が発生します。引数には、システム変数tickを指定すると最適です。
例: randomize tick

exit
　ワンべぇWMを終了します。

debug [文字列|式|chr(式)][,|;]...
　printステートメントと同等です。

waitms 式
　式の値をミリ秒と見なし、待ちます。待っている間はブレークを受け付けなくなるので、指定できる値は3000までと制限されています。3000を超える値を指定するとエラーになります。
例: waitvb 75

tron
　トレースモードをオンにします。トレースモードに入ると、新しい行の実行始めるごとに、行番号をデバッグコンソールに送信します。

troff
　トレースモードをオフにします。

orient 式
　ポートレイトとランドスケープを切り替えます。式が0ならポートレイト。-1ならランドスケープに手動切り替えが行われるまで待ちます(既にランドスケープなら何もせずにすぐ文の実行を終了します)。90ならランドスケープ90度(W-ZERO3等)。270ならランドスケープ270度(X01HT等)となります。
　互換のため、1を指定すると90と同じとして扱います。-1を指定して実行する前には、必ず「ランドスケープに切り換えてください」という趣旨の説明文を表示するようにしてください。
　他の値はエラーとなります。

width 式1,式2[,式3]
　仮想テキスト画面の表示文字数を設定します。式1は仮想テキスト画面の幅、式2は高さ。いずれも、10〜100の値のみ指定可能。式3はフォントのピクセル高さ。省略するか0の場合はdeffontsize擬似変数の値が使用されます。

fcolor 式1,式2,式3
　フォアカラーを指定します。式は順にRGB値。それぞれ0〜255の値を指定できます。

bcolor文
bcolor 式1,式2,式3
　バックカラーを指定します。式は順にRGB値。それぞれ0〜255の値を指定します。

console 式1,式2
　テキスト画面の縦方向のスクロール範囲を設定します。式1は開始行、式2は行数となります。

graph [式1,式2,式3]
　グラフィック画面を初期化します。引数が無い場合はグラフィック画面を解除します。自動的にconsole文相当の機能が走り、グラフィック画面に使用しない範囲をスクロール範囲に設定します。
　式1はテキスト画面を潰してグラフィック用にまわす行数です。
　式2は横ピクセル数です。
　式3は縦ピクセル数です。

gcls文
glcs
　バックカラーでグラフィック画面をクリアします。

pset文
pset 式1,式2
　グラフィック画面にフォアカラーで点を打ちます。

●　2項演算子
　+ - * / < > = <= >= <> and or xor

●　単項演算子
　- not

●　関数

rnd(式)
　0から式-1までの範囲の乱数を返します。

abs(式)
　式の絶対値を返します。

input("PROMPT_STRING")
　PROMPT_STRINGを出力後、1行をユーザー入力させ、それを式と見なして評価し、その結果を値とします。構文解析できない時は、"RE-ENTER"を表示して再入力を促します。

key(式)
　引数の仮想キーコードのキーが押されていたら-1。そうでなければ0を値とします。

pointr(式1,式2)
pointg(式1,式2)
pointb(式1,式2)
　グラフィック画面の色を取得します。式1はX座標、式2はY座標を指定します。
　名前末尾のr/g/bはそれぞれ、赤、緑、青のいずれの値を取り出すかで使い分けます。
　返される値は0〜255です。ただし、デバイスの色表現力の制約により、描画した色がまるめられ、異なる値が戻る場合があります。

screenpeek(式1,式2)
　テキスト画面に、X=式1、Y=式2の座標で表示された文字のUnicodeのコードを取得します。

●　システム変数 (読み出しのみ)

input
　"? "を出力後、1行をユーザー入力させ、それを式と見なして評価し、その結果を値とします。構文解析できない時は、"RE-ENTER"を表示して再入力を促します。

tick
　システムタイマーのtick値/10を返します。はみ出たbitは捨てられます。

waitchar
　次のWM_CHARメッセージを待ち、文字コードを値とします。

waitkey
　次のWM_KEYDOWNメッセージを待ち、仮想キーコードを値とします。

deffontsize擬似変数
　ワンベェが扱うデフォルトフォントのピクセル高さ。VGAなら16、QVGAなら8となります。

orient擬似変数
　ポートレイトとランドスケープの状態を0または1で返します。90度のランドスケープと270度のランドスケープを区別することはできません。

●　ファイル保存時の拡張子
　ソースフィルは、".wb"で終わるファイル名を基本とします。ただし、このルールを守らなくても利用できます。

●　QVGAマシン(X01HT等)で使用上の注意
　最初に起動時のフォントサイズは16となっていますが、deffontsize擬似変数の値は8であるため、第3引数を指定しないwidth文を使用するとフォントサイズ8の小さな文字に切り替わります。
　このwidth文の動作は「過去に作られたVGA対応プログラムをそのまま実行させる」という目的から選択されたものです。つまり、文字が小さくなってもレイアウトが画面に収まるようにするという意図によります。
　QVGAマシンでも文字を小さくしたくない時は、width文の第3引数に16等の数字を明示的に指定してください。

● ランドスケープ使用上の注意
　ランドスケープは画面90度回転のマシン(W-ZERO3等)と270度回転のマシン(X01HT等)が存在します。ポートレイトモード時にこの2つを識別する手段は無いようです。従って、どちらのマシンでもランドスケープに切り換えたい場合はorient文の引数に-1を指定して実行させ、ユーザーに手動で切り換えさせてください。コーディング例は、star.wbにあります。

●　配布規則
　本ソフトは、GNU General Public License (GPL)に従うものとします。詳細はhttp://www.gnu.org/にあります。
　ただし、今後もGPLによって公開を続けるか否かは分かりません。もっとルーズなライセンスに切り換える可能性はあり得ます。
　2006年11月現在、ソースコードは株式会社ピーデーの川俣晶(autumn@piedey.co.jp)が管理しています。有益なソースコードの修正をフィードバックしてくれれば、こちらのソースツリーに反映します。

●　変更履歴

2007年04月04日 Ver 0.03
・名前に含まれるAn TinyのAnを全てAに直す
・QVGA対応 (X01HT対応)
・width文の第3パラメータ追加 (fontSize指定機能)
・orient文の仕様変更
・deffontsize擬似変数とscreenpeek関数の追加
・new時の初期画面サイズは、もっときちんとクライアントエリアのサイズから算出する
・サンプルソースRandomPixelsのピクセルサイズを大きく
・aboutのバージョンが合っていない
・サンプルソースをorient -1使って書き直し
・サンプルソースを2本追加
・em one 800x480を一応意識してみる

2006年11月29日 Ver 0.02
・new/run/load時に画面モードもリセット
・STAR WITCHのエンディングでレイアウトが崩れている

2006年11月26日 Ver 0.01
・最初のバージョン

●　問い合わせ先
ワンべぇ配布元: http://www.piedey.co.jp/softs/wonbeWM.html
株式会社ピーデー http://www.piedey.co.jp/
川俣　晶 autumn@piedey.co.jp

以上
